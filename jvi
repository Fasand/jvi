#!/bin/bash
# TODO Add custom autocomplete menu
# TODO Change options handling to a switch statement?
# TODO Rewrite Java Config class to bash script

OPTIONS="init	new [class]	project_config	run	test	build"

# ---- ---- CONFIG ---- ---- #
# TODO Add error handling when many projects
function findConfig {
	# Find all jvi.conf files
	CONF_LOCATION=$(find $(pwd) -name 'jvi.conf')
	# If there's more then one (anything but one), scream
	COUNT=$(grep 'jvi.conf' -o <<< $CONF_LOCATION | wc -l)
	if [ $COUNT -ne 1 ]; then
		echo "Too many or too few config files"
		echo $CONF_LOCATION
		exit
	fi
	echo $CONF_LOCATION
}

# jvi.conf structure
# project_name=Example
# src_path=/full/path/to/project/src
# bin_path=/full/path/to/project/bin
function getProjectName {
	CONFIG=$(findConfig)
	echo $(cat $config | grep project_name | cut -f2 -d=)
}
function getSrcPath {
	CONFIG=$(findConfig)
	echo $(cat $CONFIG | grep src_path | cut -f2 -d=)
}
function getBinPath {
	CONFIG=$(findConfig)
	echo $(cat $CONFIG | grep bin_path | cut -f2 -d=)
}

# No option supplied
if [ -z "$1" ]; then
	echo "Options:	$OPTIONS"
	echo "Usage: $0 [option] [arguments]"
	exit
fi

# Init
if [ "$1" = "init" ]; then
	# No project name
	if [ -z "$2" ]; then
		echo "You must specify a project name"
		echo "Usage: $0 init ProjectName"
		exit
	fi
	# Folder exists
	if [ -d "$2" ]; then
		echo "Project $3 already exists. Use: $0 project_config ProjectName src_path bin_path"
		exit
	fi
	# Create folder structure
	mkdir $2 $2/bin $2/src
	# Create config file and fill with created paths
	touch $2/jvi.conf
	echo -e "# JVI configuration\nproject_name=$2\nsrc_path=$(pwd)/$2/src\nbin_path=$(pwd)/$2/bin" >> $(pwd)/$2/jvi.conf 
fi

# New [class]
# TODO Add package support and parsing
if [ "$1" = "new" ]; then
	if [ "$2" = "class" ]; then
		# If there are multiple, it will exit
		CONFIG=$(findConfig)
		# Not in the project folder
		if [ $(ls | grep 'jvi.conf' -c) -ne 1 ]; then
			echo "You must be in a project's folder"
			exit
		fi
		# Class name not specified
		if [ -z $3 ]; then
			echo "Specify the class name"
			echo "Usage: $0 new class ClassName"
			exit
		fi
		# Create the class and fill with boilerplate
		touch $(pwd)/src/$3.java
		echo -e "public class $3 {\n\n\tpublic static void main(String[] args) {\n\t\t// Enter code here\n\t}\n\n}" \
			>> $(pwd)/src/$3.java
	fi
fi

# Project config
# TODO Could be renamed to config if no other config (or branch out as with new)
if [ "$1" = "project_config" ]; then
	# Need all arguments
	if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] ; then
		echo "Not enough arguments supplied."
		echo "usage: $0 config ProjectName src_path bin_path"
		# TODO Update Config.java to accept relative paths
		echo "(src_path and bin_path must be absolute for now)"
		exit
	fi
	# Project does not exist
	if [ ! -d "$2" ]; then
		echo "[Warning] Project does not exist. Use: $0 project_new ProjectName."
		exit
	fi
	# Project exists but doesn't have bin or src folders
	if [ ! -d "$2/src" ]; then
		echo "[Warning] Project does not yet have a src folder. It will be created."
		mkdir $2/src
	fi
	if [ ! -d "$2/bin" ]; then
		echo "[Warning] Project does not yet have a bin folder. It will be created."
		mkdir $2/bin
	fi
	# Show a warning when the config file does not exist
	if [ ! -f "$2/jvi.conf" ]; then
		echo "[Warning] Config file does not exist yet. It will be created."
	fi
	# Update config file 
	java Config write $(pwd)/$2/jvi.conf $3 $4
fi

# Run
# TODO Find out how to run java files from absolute path
if [ "$1" = "run" ]; then
	echo "I won't run anything for you. Quit trying!"
fi

# Test
# TODO Implement and test
if [ "$1" = "test" ]; then
	echo "Nothing to test, I'm afraid."
fi

# Build
# TODO Implement and test
if [ "$1" = "build" ]; then
	echo "Nothing to test, I'm afraid."
fi

# Buildall
# TODO add error handling (if no files, no project, ...)
if [ "$1" = "buildall" ]; then
	javac -cp $(getSrcPath) -d $(getBinPath) $(getSrcPath)/*
fi
